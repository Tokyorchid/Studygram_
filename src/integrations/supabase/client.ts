
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rherlkynqjzbcjdhromt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJoZXJsa3lucWp6YmNqZGhyb210Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1OTAxODUsImV4cCI6MjA1NDE2NjE4NX0.rXiaaRAoW4mdpBoWiQ7YfhNgrpvtJ2AmKFUf8H_nwhw";

// Create client with enhanced realtime settings for WebRTC signaling
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    realtime: {
      params: {
        eventsPerSecond: 30,  // Increased for better responsiveness
      },
    }
  }
);

// Helper functions to handle potential errors when querying Supabase
export function isError(data: any): boolean {
  return data && typeof data === 'object' && 'error' in data;
}

export function handleSingleResult<T>(result: T | { error: any }): T | null {
  if (isError(result)) {
    console.error("Database error:", result);
    return null;
  }
  return result as T;
}

export function handleArrayResult<T>(result: T[] | { error: any }): T[] {
  if (isError(result)) {
    console.error("Database error:", result);
    return [];
  }
  if (!Array.isArray(result)) {
    console.error("Expected array result but got:", result);
    return [];
  }
  return result as T[];
}

// Helper functions for common operations to ensure proper typing
export async function getProfile(userId: string) {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId as any)
      .single();
    
    if (error) {
      console.error("Error fetching profile:", error);
      return null;
    }
    
    return data;
  } catch (err) {
    console.error("Unexpected error fetching profile:", err);
    return null;
  }
}

export async function updateProfile(userId: string, updates: any) {
  try {
    const { error } = await supabase
      .from('profiles')
      .update(updates as any)
      .eq('id', userId as any);
    
    return { error };
  } catch (err: any) {
    console.error("Unexpected error updating profile:", err);
    return { error: { message: err.message || "Failed to update profile" } };
  }
}

// Social features helpers
export async function followUser(userId: string) {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return { error: { message: "You must be logged in to follow users" } };
    }
    
    const { error } = await supabase
      .from('user_follows')
      .insert({
        follower_id: user.id,
        following_id: userId
      });
    
    return { error };
  } catch (err: any) {
    console.error("Error following user:", err);
    return { error: { message: err.message || "Failed to follow user" } };
  }
}

export async function unfollowUser(userId: string) {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return { error: { message: "You must be logged in to unfollow users" } };
    }
    
    const { error } = await supabase
      .from('user_follows')
      .delete()
      .eq('follower_id', user.id)
      .eq('following_id', userId);
    
    return { error };
  } catch (err: any) {
    console.error("Error unfollowing user:", err);
    return { error: { message: err.message || "Failed to unfollow user" } };
  }
}

export async function isFollowing(userId: string): Promise<boolean> {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) return false;
    
    const { data, error } = await supabase
      .from('user_follows')
      .select('*')
      .eq('follower_id', user.id)
      .eq('following_id', userId)
      .single();
    
    if (error && error.code !== 'PGRST116') { // PGRST116 is "no rows returned" error
      console.error("Error checking follow status:", error);
      return false;
    }
    
    return !!data;
  } catch (err) {
    console.error("Error checking follow status:", err);
    return false;
  }
}

export async function sendDirectMessage(recipientId: string, content: string) {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return { error: { message: "You must be logged in to send messages" } };
    }
    
    const { error } = await supabase
      .from('direct_messages')
      .insert({
        sender_id: user.id,
        recipient_id: recipientId,
        content: content,
        is_read: false
      });
    
    return { error };
  } catch (err: any) {
    console.error("Error sending message:", err);
    return { error: { message: err.message || "Failed to send message" } };
  }
}

export async function getDirectMessages(otherUserId: string) {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return [];
    }
    
    const { data, error } = await supabase
      .from('direct_messages')
      .select('*')
      .or(`and(sender_id.eq.${user.id},recipient_id.eq.${otherUserId}),and(sender_id.eq.${otherUserId},recipient_id.eq.${user.id})`)
      .order('created_at', { ascending: true });
    
    if (error) {
      console.error("Error fetching messages:", error);
      return [];
    }
    
    return data;
  } catch (err) {
    console.error("Error fetching messages:", err);
    return [];
  }
}

export async function searchProfiles(query: string) {
  try {
    if (!query.trim()) return [];
    
    const { data, error } = await supabase
      .from('profiles')
      .select('id, username, full_name, avatar_url')
      .or(`username.ilike.%${query}%,full_name.ilike.%${query}%`)
      .limit(10);
    
    if (error) {
      console.error("Error searching profiles:", error);
      return [];
    }
    
    return data || [];
  } catch (err) {
    console.error("Error searching profiles:", err);
    return [];
  }
}

// Helper for study sessions to handle missing fields
export interface ExtendedStudySession {
  id: string;
  created_at: string;
  created_by: string;
  end_time: string;
  start_time: string;
  session_type: string;
  title?: string; 
  subject?: string;
  description?: string;
  metadata: any;
  vibe_settings: any;
  instructor_id?: string;
  squad_id?: string;
  title_id?: string;
}

export function extendStudySession(session: any): ExtendedStudySession {
  // Extract title and description from metadata if available
  const title = session.metadata?.title || 'Untitled Session';
  const subject = session.metadata?.subject || 'General Study';
  const description = session.metadata?.description || session.metadata?.goal || '';
  
  return {
    ...session,
    title,
    subject,
    description
  };
}

// Workaround for custom tables without modifying SupabaseClientOptions
declare module '@supabase/supabase-js' {
  interface PostgrestQueryBuilder<Schema> {
    table<TableName extends string>(
      tableName: TableName
    ): PostgrestQueryBuilder<Schema>;
  }
}
