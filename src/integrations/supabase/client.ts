
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rherlkynqjzbcjdhromt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJoZXJsa3lucWp6YmNqZGhyb210Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1OTAxODUsImV4cCI6MjA1NDE2NjE4NX0.rXiaaRAoW4mdpBoWiQ7YfhNgrpvtJ2AmKFUf8H_nwhw";

// Create client with enhanced realtime settings for WebRTC signaling
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    realtime: {
      params: {
        eventsPerSecond: 30,  // Increased for better responsiveness
      },
    }
  }
);

// Helper functions to handle potential errors when querying Supabase
export function isError(data: any): boolean {
  return data && typeof data === 'object' && 'error' in data;
}

export function handleSingleResult<T>(result: T | { error: any }): T | null {
  if (isError(result)) {
    console.error("Database error:", result);
    return null;
  }
  return result as T;
}

export function handleArrayResult<T>(result: T[] | { error: any }): T[] {
  if (isError(result)) {
    console.error("Database error:", result);
    return [];
  }
  return result as T[];
}

// Helper functions for common operations to ensure proper typing
export async function getProfile(userId: string) {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId as any)
      .single();
    
    if (error) {
      console.error("Error fetching profile:", error);
      return null;
    }
    
    return data;
  } catch (err) {
    console.error("Unexpected error fetching profile:", err);
    return null;
  }
}

export async function updateProfile(userId: string, updates: any) {
  try {
    const { error } = await supabase
      .from('profiles')
      .update(updates as any)
      .eq('id', userId as any);
    
    return { error };
  } catch (err: any) {
    console.error("Unexpected error updating profile:", err);
    return { error: { message: err.message || "Failed to update profile" } };
  }
}

// Workaround for custom tables without modifying SupabaseClientOptions
declare module '@supabase/supabase-js' {
  interface PostgrestQueryBuilder<Schema> {
    table<TableName extends string>(
      tableName: TableName
    ): PostgrestQueryBuilder<Schema>;
  }
}
