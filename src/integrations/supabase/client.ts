
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rherlkynqjzbcjdhromt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJoZXJsa3lucWp6YmNqZGhyb210Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1OTAxODUsImV4cCI6MjA1NDE2NjE4NX0.rXiaaRAoW4mdpBoWiQ7YfhNgrpvtJ2AmKFUf8H_nwhw";

// Create client with enhanced realtime settings for WebRTC signaling
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    realtime: {
      params: {
        eventsPerSecond: 30,  // Increased for better responsiveness
      },
    }
  }
);

// Type-safe helper functions for querying Supabase
export function isError(data: any): boolean {
  return data && typeof data === 'object' && 'error' in data;
}

export async function getProfile(userId: string) {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) {
      console.error("Error fetching profile:", error);
      return null;
    }
    
    return data;
  } catch (err) {
    console.error("Unexpected error fetching profile:", err);
    return null;
  }
}

export async function updateProfile(userId: string, updates: any) {
  try {
    const { error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId);
    
    return { error };
  } catch (err: any) {
    console.error("Unexpected error updating profile:", err);
    return { error: { message: err.message || "Failed to update profile" } };
  }
}

// Helper functions to handle potential errors when querying Supabase
export function handleSingleResult<T>(result: T | { error: any }): T | null {
  if (isError(result)) {
    console.error("Database error:", result);
    return null;
  }
  return result as T;
}

export function handleArrayResult<T>(result: T[] | { error: any }): T[] {
  if (isError(result)) {
    console.error("Database error:", result);
    return [];
  }
  return result as T[];
}

// Advanced error handling for complex queries
export function assertType<T>(data: any, errorMsg?: string): T {
  if (!data || isError(data)) {
    console.error(errorMsg || "Type assertion failed", data);
    throw new Error(errorMsg || "Failed to assert type");
  }
  return data as T;
}

// Type-safe channel helpers for WebRTC
export function createSignalingChannel(channelName: string) {
  return supabase.channel(channelName, {
    config: {
      broadcast: { self: true },
      presence: {
        key: '',
      },
    }
  });
}
